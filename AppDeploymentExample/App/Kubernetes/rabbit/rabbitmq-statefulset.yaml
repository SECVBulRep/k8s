apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 3
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 10
      containers:
      - name: rabbitmq
        image: rabbitmq:3.13-management
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 15672
          name: management
        - containerPort: 4369
          name: epmd
        - containerPort: 25672
          name: clustering
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "app"
        - name: RABBITMQ_DEFAULT_PASS
          value: "AppPassRabbitMQ"
        - name: RABBITMQ_ERLANG_COOKIE
          value: "JFKZVCBYEISEQILVZMSD"
        - name: RABBITMQ_NODENAME
          value: "rabbit@$(POD_NAME).rabbitmq.rabbitmq.svc.cluster.local"
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_CONFIG_FILE
          value: "/etc/rabbitmq/rabbitmq.conf"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
        - name: rabbitmq-config
          mountPath: /etc/rabbitmq
        - name: kube-api-access
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          readOnly: true
      - name: ha-policy
        image: rabbitmq:3.13-management
        command:
        - /bin/sh
        - -c
        - |
          for i in $(seq 1 30); do
            rabbitmqctl set_policy --priority 0 --apply-to queues ha-all ".*" '{"ha-mode":"all","ha-sync-mode":"automatic"}' && echo "HA policy set successfully" && exit 0
            echo "Retrying HA policy setup ($i/30)"
            sleep 5
          done
          echo "Failed to set HA policy"
          exit 1
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "app"
        - name: RABBITMQ_DEFAULT_PASS
          value: "AppPassRabbitMQ"
        volumeMounts:
        - name: kube-api-access
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          readOnly: true
      volumes:
      - name: rabbitmq-config
        configMap:
          name: rabbitmq-config
      - name: kube-api-access
        projected:
          sources:
          - serviceAccountToken:
              path: token
              expirationSeconds: 3600
              audience: https://kubernetes.default.svc.cluster.local
          - configMap:
              name: kube-root-ca.crt
              items:
              - key: ca.crt
                path: ca.crt
          - downwardAPI:
              items:
              - path: namespace
                fieldRef:
                  fieldPath: metadata.namespace
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi