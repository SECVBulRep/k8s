apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: redis
spec:
  serviceName: redis-cluster
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      terminationGracePeriodSeconds: 10
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: redis-cluster
                topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: redis-cluster
      tolerations:
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 20
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 20
      initContainers:
        - name: set-announce-ip
          image: busybox
          command:
            - sh
            - -c
            - |
              POD_NAME=$(cat /etc/podname/name)
              ANNOUNCE_IP=$(grep "^$POD_NAME:" /etc/announce-ips/data | cut -d':' -f2 | tr -d ' ')
              echo "cluster-announce-ip $ANNOUNCE_IP" > /etc/redis/announce-ip.conf
          volumeMounts:
            - name: podname
              mountPath: /etc/podname
            - name: announce-ips
              mountPath: /etc/announce-ips
            - name: announce-ip
              mountPath: /etc/redis
      containers:
        - name: redis
          image: redis:7.0
          args:
            - redis-server
            - /etc/redis/redis.conf
          ports:
            - containerPort: 6379
              name: redis
            - containerPort: 16379
              name: cluster
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
            - name: announce-ip
              mountPath: /etc/redis/announce-ip.conf
              subPath: announce-ip.conf
            - name: redis-data
              mountPath: /data
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
      volumes:
        - name: announce-ip
          emptyDir: {}
        - name: podname
          downwardAPI:
            items:
              - path: name
                fieldRef:
                  fieldPath: metadata.name
        - name: announce-ips
          configMap:
            name: redis-announce-ips
        - name: redis-config
          configMap:
            name: redis-config
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: longhorn-custom
        resources:
          requests:
            storage: 1Gi