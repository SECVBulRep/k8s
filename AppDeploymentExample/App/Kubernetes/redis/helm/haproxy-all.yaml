# haproxy-debug-detailed.yaml - РАБОЧАЯ ВЕРСИЯ
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-debug-detailed
  namespace: redis
data:
  haproxy.cfg: |
    global
        daemon
        maxconn 1000
        log stdout local0 debug

    defaults
        mode tcp
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms
        timeout check 5000ms
        log global

    frontend redis_frontend
        bind *:6379
        default_backend redis_backend

    backend redis_backend
        mode tcp
        balance first
        option tcp-check
        option log-health-checks
        
        # Health checks с отладкой
        tcp-check connect
        tcp-check send "AUTH healthcheck HEALTHCHECK_PASSWORD_PLACEHOLDER\r\n"
        tcp-check expect string "+OK"
        tcp-check send "PING\r\n"
        tcp-check expect string "+PONG"
        tcp-check send "INFO replication\r\n"
        tcp-check expect string "role:master"
        tcp-check send "QUIT\r\n"
        tcp-check expect string "+OK"
        
        # Более мягкие настройки серверов
        server redis-0 redis-node-0.redis-headless.redis.svc.cluster.local:6379 check inter 10s fall 5 rise 2
        server redis-1 redis-node-1.redis-headless.redis.svc.cluster.local:6379 check inter 10s fall 5 rise 2
        server redis-2 redis-node-2.redis-headless.redis.svc.cluster.local:6379 check inter 10s fall 5 rise 2

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy-debug-detailed
  namespace: redis
  labels:
    app: haproxy-debug-detailed
spec:
  replicas: 2  # ДВА пода для высокой доступности
  selector:
    matchLabels:
      app: haproxy-debug-detailed
  template:
    metadata:
      labels:
        app: haproxy-debug-detailed
    spec:
      containers:
      - name: haproxy
        image: haproxy:2.9-alpine
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: HEALTHCHECK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-healthcheck-secret
              key: password
        volumeMounts:
        - name: config-template
          mountPath: /etc/haproxy-template
          readOnly: true
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "=== HAProxy DEBUG version ==="
          
          if [ -z "$HEALTHCHECK_PASSWORD" ]; then
            echo "ERROR: Password not available!"
            exit 1
          fi
          
          echo "Password: ${HEALTHCHECK_PASSWORD}"
          
          # Подставляем пароль
          sed "s/HEALTHCHECK_PASSWORD_PLACEHOLDER/${HEALTHCHECK_PASSWORD}/g" \
            /etc/haproxy-template/haproxy.cfg > /tmp/haproxy.cfg
          
          echo "=== Final config check ==="
          grep -A2 -B2 "AUTH.*healthcheck" /tmp/haproxy.cfg
          
          # Проверяем синтаксис
          haproxy -f /tmp/haproxy.cfg -c
          if [ $? -ne 0 ]; then
            echo "Config syntax error!"
            cat /tmp/haproxy.cfg
            exit 1
          fi
          
          # Тестируем сетевую связность ПЕРЕД запуском HAProxy
          echo "=== Network connectivity test ==="
          nc -zv redis-node-0.redis-headless.redis.svc.cluster.local 6379 || echo "redis-node-0 unreachable"
          nc -zv redis-node-1.redis-headless.redis.svc.cluster.local 6379 || echo "redis-node-1 unreachable"
          nc -zv redis-node-2.redis-headless.redis.svc.cluster.local 6379 || echo "redis-node-2 unreachable"
          
          # Тестируем health check команды вручную
          echo "=== Manual health check test ==="
          timeout 5 sh -c "echo 'AUTH healthcheck ${HEALTHCHECK_PASSWORD}' | nc redis-node-0.redis-headless.redis.svc.cluster.local 6379" | head -1 || echo "Manual AUTH failed"
          
          echo "Starting HAProxy with debug..."
          exec haproxy -f /tmp/haproxy.cfg -db  # -db включает debug логи
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 60  # Больше времени для отладки
          periodSeconds: 30
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: config-template
        configMap:
          name: haproxy-debug-detailed

---
apiVersion: v1
kind: Service
metadata:
  name: redis-external
  namespace: redis
  labels:
    app: haproxy-debug-detailed
spec:
  type: LoadBalancer
  loadBalancerIP: "172.16.29.110"
  selector:
    app: haproxy-debug-detailed
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP